#!/usr/bin/python
# SlideoTracker : synchronising slides and video conference
# Copyright (C) 2010 Sebastien Campion

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.

# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Contact : sebastien.campion@gmail.com or seb@scamp.fr
import os
import sys
from slideo.slideotracker import SlideoTracker
import numpy as np

def save(outfile, track_results, precision, format):
    '''
    Save method in JavaScript or CSV
    '''
    o = open(outfile, 'w')
    if format == 'js':
        frames = np.array(track_results.keys())
        frames = [int(i) for i in frames]
        o.writelines('slides=%s;\n' % str(track_results.values()))
        o.writelines('frames=%s;\n' % frames)

    elif format == 'csv':
        o.writelines("#slide_number;star_frame;end_frame\n")
        current_frame = 0
        for sn, fn in track_results.items():
            sn, sf, ef = sn, precision * current_frame, precision * fn
            o.writelines("%i;%i;%i\n" % (sn, sf, ef))
            current_frame = fn
    else:
        raise NotImplementedError('Output format %s not available' % format)
    o.close()

if __name__ == '__main__':
    from optparse import OptionParser
    parser = OptionParser(usage="""Slide timing extraction from video
    video filename name is given through the -v option
    slides filenames are given as parameters.""")
    parser.add_option('-v', '--video', action='store', type='string',
                      dest="video", metavar="video",
                      help="video filename")
    parser.add_option("-r", "--rate", action="store", type='int',
                      dest='rate', default=25,
                      help='precision in number of frame (default 25)')
    parser.add_option("-o", "--out", action="store", dest='outfile',
                      help='output file name, by default results.js ',
                      default='results.js')
    parser.add_option("-f", "--format", action="store", dest='format',
                      help='output file format js (default),csv ',
                      default='js')
    parser.add_option("-d", "--debug", action="store_true", dest='debug',
                      help='debug trace', default=False)
    (options, args) = parser.parse_args()

    if not os.path.exists(options.video or ""):
        print "Video filename should be given through the -v option"
        sys.exit(1)
    if not args:
        print "Slide filenames should be given as arguments"
        sys.exit(1)

    videopath = os.path.abspath(options.video)
    slidepath = [ os.path.abspath(n) for n in args ]
    print '#videopath %s' % videopath
    print '#nb of slides %i' % len(slidepath)
    slideo = SlideoTracker(videopath, slidepath,
                           frame_rate=options.rate,
                           debug=options.debug)
    results = dict([(frame_id, slidepath)
                    for frame_id, slidepath in slideo.track()])

    save(options.outfile, results, options.rate, options.format)
